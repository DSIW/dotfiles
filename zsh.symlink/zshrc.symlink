# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="dsiw"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(archlinux git git-remote-branch git-extras bundler ruby gem zsh-syntax-highlighting tmuxinator tmux virtualenvwrapper ssh-agent gpg-agent vi-mode)
#plugins=(archlinux battery git ssh-agent vundle)

# zstyle :omz:plugins:gpg-agent ssh-support yes

# eval "$(hub alias -s)"

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
#ZSH_HIGHLIGHT_STYLES[cursor]='bg=blue'

source $ZSH/oh-my-zsh.sh

bindkey '\e.' insert-last-word # Type ESC+. to get the last few words
bindkey "^F" forward-word
bindkey "^B" backward-word

# setopt auto_cd
# cdpath=($HOME/odacer/papierkram $HOME/thesis $HOME/.spaz $HOME/public/github)

# zftp
fpath=(~/.zsh/completers $fpath)
autoload -U zfinit && zfinit

# autoload -U tetris
# zle -N tetris
# hit alt-x and then type tetris and hit CR

# Better history searching with arrow keys
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search

zstyle ':completion:*' completer _expand _expand_alias _complete _ignored _correct _approximate
# Sort by filename
zstyle ':completion:*' file-sort name
# Hide current dir in ..
zstyle ':completion:*' ignore-parents parent pwd directory
# Remove the trailing slash for dirs after completion
zstyle ':completion:*' squeeze-slashes true
# USe menu for kill command
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*'   force-list always

autoload -Uz compinit
compinit
# load custom completions
source ~/.zsh/completions
# Use compinstall to start wizard for completion settings

# eval $(dircolors ~/.dircolors)

[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
export LOCALE=en_US.utf8

source ~/.aliasrc
source ~/.zshenv

HISTSIZE=9999
SAVEHIST=9999
setopt extendedhistory
#HISTFILE=~/.zhistory

stty -ixon

# anyenv
export PATH="$HOME/.anyenv/bin:$PATH"
eval "$(anyenv init -)"
eval $(pyenv virtualenv-init -) # FIXME: (eval):1: parse error near `then'

# rbenv (rather use chruby)
# export PATH="$HOME/.rbenv/bin:$PATH"
# eval "$(rbenv init -)"
# chruby
# source /usr/share/chruby/chruby.sh
# source /usr/share/chruby/auto.sh
# Use ruby-install for installing new ruby versions

function rspec {
  echo "Rules":
  echo "* DRY your code ever and every time! Note: You'll never come back and fix it."
  echo "* Test only the interface not the implementation!"
  echo "* Test only the incoming methods!"
  echo "* Except  only the incoming methods!"

  echo "* Do not use let, subject and its!"
  echo "* Use given, when, then structure for any test case!"
  echo "* Refactor in smallest steps!"
  echo "* Be explicit over implicit!"
}

#############

# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert


# [[ -f ".venv" ]] && eval "workon $(cat .venv)"

[[ -f /etc/profile.d/fzf.zsh ]] && source /etc/profile.d/fzf.zsh

# SSH and GPG Agent for caching

# eval $(keychain --nogui --quiet --agents gpg,ssh --confhost --eval id_rsa $(cat ~/.password-store/.gpg-id))
# eval $(keychain --nogui --quiet --agents ssh --confhost --eval id_rsa)
# source <(envoy -t gpg-agent -p)

# # Start the gpg-agent if not already running
# if ! pgrep -x -u "${USER}" gpg-agent >/dev/null 2>&1; then
#   gpg-connect-agent /bye >/dev/null 2>&1
# fi

# # # Set GPG TTY
# export GPG_TTY=$(tty)

# # # Set SSH to use gpg-agent
# [ -r ~/.gnupg/gpg-agent.env ] && source ~/.gnupg/gpg-agent.env
# unset SSH_AGENT_PID
# if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
#   export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
# fi

# # # Refresh gpg-agent tty in case user switches into an X session
# gpg-connect-agent updatestartuptty /bye >/dev/null

# if [[ $SSH_AGENT_PID ]] && [[ $(kill -0 $SSH_AGENT_PID) == '0' ]]; then
#   /usr/bin/ssh-add
# fi
